---
# yamllint disable rule:line-length
# renovate: datasource=docker depName=ghcr.io/siderolabs/installer
# yaml-language-server: $schema=https://raw.githubusercontent.com/siderolabs/talos/refs/tags/v1.10.3/pkg/machinery/config/schemas/config.schema.json
# yamllint enable rule:line-length

version: v1alpha1
debug: false

machine:
  type: controlplane
  token: "{{ ENV.TALCONFIG_MACHINE_TOKEN }}"
  ca:
    crt: "{{ ENV.TALCONFIG_MACHINE_CA_CRT }}"
    key: "{{ ENV.TALCONFIG_MACHINE_CA_KEY }}"

  certSANs:
    - 127.0.0.1
    - 10.42.20.10

  kubelet:
    image: "ghcr.io/siderolabs/kubelet:{{ ENV.KUBERNETES_VERSION }}"
    defaultRuntimeSeccompProfileEnabled: true
    disableManifestsDirectory: true
    extraMounts:
      - destination: /var/mnt/extra
        type: bind
        source: /var/mnt/extra
        options: ["bind", "rshared", "rw"]
    extraConfig:
      serializeImagePulls: false
      featureGates:
        UserNamespacesSupport: true
        UserNamespacesPodSecurityStandards: true

    nodeIP:
      validSubnets:
        - 10.42.20.0/24

  network:
    interfaces:
      - deviceSelector:
          hardwareAddr: 48:21:0b:51:*
        dhcp: true
        # mtu: 9000
        vip:
          ip: 10.42.20.10

  install:
    # yamllint disable-line rule:line-length
    image: "factory.rzegocki.dev/metal-installer-secureboot/a09add3580ff16133f61b3bf8188f4a103c074d25e12536d9a7c03c39a812068:{{ ENV.TALOS_VERSION }}"
    wipe: false

    # they are ignored with UKI and SecureBoot, keeping them here for reference
    extraKernelArgs:
      - i915.enable_guc=3                    # Alder Lake CPU / iGPU, hw transcoding
      - intel_iommu=on                       # PCI Passthrough, hw transcoding
      - iommu=pt                             # PCI Passthrough, hw transcoding
      - net.ifnames=0                        # Classic ethernet names
      - sysctl.kernel.kexec_load_disabled=1  # kexec makes SecureBoot pointless
      - talos.auditd.disabled=1              # Too much noise

      # in secureboot, talos locks down to "confidentiality" mode by default, which may break cilium
      # more info: https://github.com/siderolabs/talos/pull/8535
      - -lockdown
      - lockdown=integrity

  features:
    rbac: true
    stableHostname: true
    apidCheckExtKeyUsage: true
    diskQuotaSupport: true
    kubernetesTalosAPIAccess:
      enabled: true
      allowedRoles: ["os:admin"]
      allowedKubernetesNamespaces:
        - system-upgrade
    kubePrism:
      enabled: true
      port: 7445
    hostDNS:
      enabled: true
      resolveMemberNames: true
      forwardKubeDNSToHost: false

  nodeLabels:
    intel.feature.node.kubernetes.io/gpu: "true"
    topology.kubernetes.io/region: deedee
    topology.kubernetes.io/zone: d

  files:
    # Spegel
    - op: create
      path: /etc/cri/conf.d/20-customization.part
      content: |
        [plugins."io.containerd.cri.v1.images"]
          discard_unpacked_layers = false
    # Persistent NFS
    - op: overwrite
      path: /etc/nfsmount.conf
      permissions: 0o644
      content: |
        [ NFSMount_Global_Options ]
        nfsvers=4.2
        hard=true
        nconnect=16
        noatime=true

  sysctls:
    net.core.default_qdisc: fq            # Enable pacing and fair queueing for smoother flow control
    net.core.rmem_max: "67108864"         # Cloudflared / QUIC
    net.core.wmem_max: "67108864"         # Cloudflared / QUIC
    net.ipv4.tcp_congestion_control: bbr  # Use BBR congestion control for fast, low-latency delivery
    net.ipv4.tcp_fastopen: "3"            # Send and accept data in the opening SYN packet
    net.ipv4.tcp_mtu_probing: "1"         # Enable MTU probing in case of ICMP blackholes
    net.ipv4.tcp_window_scaling: "1"      # Enable TCP window scaling to go beyond 64KB receive windows
    net.ipv6.conf.all.disable_ipv6: "1"   # Not used, causes lot of headaches
    user.max_user_namespaces: "11255"     # User Namespaces
    vm.nr_hugepages: "1024"               # PostgreSQL

    # net.ipv4.tcp_rmem: 4096 87380 8388608  # Conservative receive buffer tuning (min, default, max in bytes)
    # net.ipv4.tcp_wmem: 4096 65536 8388608  # Conservative send buffer tuning (min, default, max in bytes)
    net.ipv4.tcp_rmem: 4096 87380 33554432  # Performant receive buffer tuning (min, default, max in bytes)
    net.ipv4.tcp_wmem: 4096 65536 33554432  # Performant send buffer tuning (min, default, max in bytes)

    # nope, nope, nope

  sysfs:
    devices.system.cpu.intel_pstate.hwp_dynamic_boost: "1"

  udev:
    rules:
      # Intel GPU
      - SUBSYSTEM=="drm", KERNEL=="renderD*", GROUP="44", MODE="0660"
      # Thunderbolt
      - ACTION=="add", SUBSYSTEM=="thunderbolt", ATTR{authorized}=="0", ATTR{authorized}="1"

  kernel:
    modules:
      - name: thunderbolt
      - name: thunderbolt_net

cluster:
  id: "{{ ENV.TALCONFIG_CLUSTER_ID }}"
  secret: "{{ ENV.TALCONFIG_CLUSTER_SECRET }}"
  controlPlane:
    endpoint: https://10.42.20.10:6443
  clusterName: deedee
  network:
    dnsDomain: cluster.local
    podSubnets:
      - 172.30.0.0/16
    serviceSubnets:
      - 172.31.0.0/16
    cni:
      name: none

  token: "{{ ENV.TALCONFIG_CLUSTER_TOKEN }}"
  secretboxEncryptionSecret: "{{ ENV.TALCONFIG_CLUSTER_SECRETBOXENCRYPTIONSECRET }}"
  ca:
    crt: "{{ ENV.TALCONFIG_CLUSTER_CA_CRT }}"
    key: "{{ ENV.TALCONFIG_CLUSTER_CA_KEY }}"
  aggregatorCA:
    crt: "{{ ENV.TALCONFIG_CLUSTER_AGGREGATORCA_CRT }}"
    key: "{{ ENV.TALCONFIG_CLUSTER_AGGREGATORCA_KEY }}"
  serviceAccount:
    key: "{{ ENV.TALCONFIG_CLUSTER_SERVICEACCOUNT_KEY }}"
  apiServer:
    image: "registry.k8s.io/kube-apiserver:{{ ENV.KUBERNETES_VERSION }}"
    certSANs:
      - 127.0.0.1
      - 10.42.20.10
    disablePodSecurityPolicy: true
    extraArgs:
      enable-aggregator-routing: "true"
      feature-gates: MutatingAdmissionPolicy=true,UserNamespacesSupport=true,UserNamespacesPodSecurityStandards=true
      runtime-config: admissionregistration.k8s.io/v1alpha1=true
    admissionControl:
      - name: PodSecurity
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1alpha1
          defaults:
            audit: restricted
            audit-version: latest
            enforce: baseline
            enforce-version: latest
            warn: restricted
            warn-version: latest
          exemptions:
            namespaces:
              - kube-system
            runtimeClasses: []
            usernames: []
          kind: PodSecurityConfiguration
    auditPolicy:
      apiVersion: audit.k8s.io/v1
      kind: Policy
      rules:
        - level: Metadata

  # Controller manager server specific configuration options.
  controllerManager:
    image: "registry.k8s.io/kube-controller-manager:{{ ENV.KUBERNETES_VERSION }}"
    extraArgs:
      bind-address: 0.0.0.0
  proxy:
    disabled: true
    image: "registry.k8s.io/kube-proxy:{{ ENV.KUBERNETES_VERSION }}"
  scheduler:
    image: "registry.k8s.io/kube-scheduler:{{ ENV.KUBERNETES_VERSION }}"
    extraArgs:
      bind-address: 0.0.0.0
    config:
      apiVersion: kubescheduler.config.k8s.io/v1
      kind: KubeSchedulerConfiguration
      profiles:
        - schedulerName: default-scheduler
          plugins:
            score:
              disabled:
                - name: ImageLocality
          pluginConfig:
            - name: PodTopologySpread
              args:
                defaultingType: List
                defaultConstraints:
                  - maxSkew: 1
                    topologyKey: kubernetes.io/hostname
                    whenUnsatisfiable: ScheduleAnyway
  etcd:
    ca:
      crt: "{{ ENV.TALCONFIG_CLUSTER_ETCD_CA_CRT }}"
      key: "{{ ENV.TALCONFIG_CLUSTER_ETCD_CA_KEY }}"
    extraArgs:
      listen-metrics-urls: http://0.0.0.0:2381
    advertisedSubnets:
      - 10.42.20.0/24
  coreDNS:
    disabled: true

  allowSchedulingOnControlPlanes: true

# vim:ft=yaml
