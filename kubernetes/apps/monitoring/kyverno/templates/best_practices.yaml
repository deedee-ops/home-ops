---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: check-deprecated-apis
  annotations:
    policies.kyverno.io/title: Check deprecated APIs
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/subject: Kubernetes APIs
    kyverno.io/kyverno-version: 1.7.4
    policies.kyverno.io/minversion: 1.7.4
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      Kubernetes APIs are sometimes deprecated and removed after a few releases.
      As a best practice, older API versions should be replaced with newer versions.
      This policy validates for APIs that are deprecated or scheduled for removal.
      Note that checking for some of these resources may require modifying the Kyverno
      ConfigMap to remove filters. In the validate-v1-22-removals rule, the Lease kind
      has been commented out due to a check for this kind having a performance penalty
      on Kubernetes clusters with many leases. Its enabling should be attended carefully
      and is not recommended on large clusters. PodSecurityPolicy is removed in v1.25
      so therefore the validate-v1-25-removals rule may not completely work on 1.25+.
      This policy requires Kyverno v1.7.4+ to function properly.
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: validate-v1-25-removals
      match:
        any:
          - resources:
              # NOTE: PodSecurityPolicy is completely removed in 1.25.
              kinds:
                - batch/*/CronJob
                - discovery.k8s.io/*/EndpointSlice
                - events.k8s.io/*/Event
                - policy/*/PodDisruptionBudget
                - node.k8s.io/*/RuntimeClass
      preconditions:
        all:
          - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
            operator: NotEquals
            value: DELETE
          - key: "{{`{{request.object.apiVersion}}`}}"
            operator: AnyIn
            value:
              - batch/v1beta1
              - discovery.k8s.io/v1beta1
              - events.k8s.io/v1beta1
              - policy/v1beta1
              - node.k8s.io/v1beta1
      validate:
        message: >-
          {{`{{ request.object.apiVersion }}`}}/{{`{{ request.object.kind }}`}}
          is deprecated and will be removed in v1.25.
          See: https://kubernetes.io/docs/reference/using-api/deprecation-guide/
        deny: {}
    - name: validate-v1-26-removals
      match:
        any:
          - resources:
              kinds:
                - flowcontrol.apiserver.k8s.io/*/FlowSchema
                - flowcontrol.apiserver.k8s.io/*/PriorityLevelConfiguration
                - autoscaling/*/HorizontalPodAutoscaler
      preconditions:
        all:
          - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
            operator: NotEquals
            value: DELETE
          - key: "{{`{{request.object.apiVersion}}`}}"
            operator: AnyIn
            value:
              - flowcontrol.apiserver.k8s.io/v1beta1
              - autoscaling/v2beta2
      validate:
        message: >-
          {{`{{ request.object.apiVersion }}`}}/{{`{{ request.object.kind }}`}}
          is deprecated and will be removed in v1.26.
          See: https://kubernetes.io/docs/reference/using-api/deprecation-guide/
        deny: {}
    - name: validate-v1-27-removals
      match:
        any:
          - resources:
              kinds:
                - storage.k8s.io/*/CSIStorageCapacity
      preconditions:
        all:
          - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
            operator: NotEquals
            value: DELETE
          - key: "{{`{{request.object.apiVersion}}`}}"
            operator: AnyIn
            value:
              - storage.k8s.io/v1beta1
      validate:
        message: >-
          {{`{{ request.object.apiVersion }}`}}/{{`{{ request.object.kind }}`}}
          is deprecated and will be removed in v1.27.
          See: https://kubernetes.io/docs/reference/using-api/deprecation-guide/
        deny: {}
    - name: validate-v1-29-removals
      match:
        any:
          - resources:
              kinds:
                - flowcontrol.apiserver.k8s.io/*/FlowSchema
                - flowcontrol.apiserver.k8s.io/*/PriorityLevelConfiguration
      preconditions:
        all:
          - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
            operator: NotEquals
            value: DELETE
          - key: "{{`{{request.object.apiVersion}}`}}"
            operator: AnyIn
            value:
              - flowcontrol.apiserver.k8s.io/v1beta2
      validate:
        message: >-
          {{`{{ request.object.apiVersion }}`}}/{{`{{ request.object.kind }}`}}
          is deprecated and will be removed in v1.29.
          See: https://kubernetes.io/docs/reference/using-api/deprecation-guide/
        deny: {}
---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-container-sock-mounts
  annotations:
    policies.kyverno.io/title: Disallow CRI socket mounts
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      Container daemon socket bind mounts allows access to the container engine on the
      node. This access can be used for privilege escalation and to manage containers
      outside of Kubernetes, and hence should not be allowed. This policy validates that
      the sockets used for CRI engines Docker, Containerd, and CRI-O are not used.
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: validate-docker-sock-mount
      match:
        any:
          - resources:
              kinds:
                - Pod
      validate:
        message: "Use of the Docker Unix socket is not allowed."
        pattern:
          spec:
            =(volumes):
              - =(hostPath):
                  path: "!/var/run/docker.sock"
    - name: validate-containerd-sock-mount
      match:
        any:
          - resources:
              kinds:
                - Pod
      validate:
        message: "Use of the Containerd Unix socket is not allowed."
        pattern:
          spec:
            =(volumes):
              - =(hostPath):
                  path: "!/var/run/containerd.sock"
    - name: validate-crio-sock-mount
      match:
        any:
          - resources:
              kinds:
                - Pod
      validate:
        message: "Use of the CRI-O Unix socket is not allowed."
        pattern:
          spec:
            =(volumes):
              - =(hostPath):
                  path: "!/var/run/crio.sock"
---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-empty-ingress-host
  annotations:
    policies.kyverno.io/title: Disallow empty Ingress host
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Ingress
    policies.kyverno.io/description: >-
      An ingress resource needs to define an actual host name
      in order to be valid. This policy ensures that there is a
      hostname for each rule defined.
spec:
  validationFailureAction: Audit
  background: false
  rules:
    - name: disallow-empty-ingress-host
      match:
        any:
          - resources:
              kinds:
                - Ingress
      validate:
        message: "The Ingress host name must be defined, not empty."
        deny:
          conditions:
            all:
              - key: "{{`{{`}} request.object.spec.rules[].host || `[]` | length(@) {{`}}`}}"
                operator: NotEquals
                value: "{{`{{`}} request.object.spec.rules[].http || `[]` | length(@) {{`}}`}}"
---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-latest-tag
  annotations:
    policies.kyverno.io/title: Disallow Latest Tag
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      The ':latest' tag is mutable and can lead to unexpected errors if the
      image changes. A best practice is to use an immutable tag that maps to
      a specific version of an application Pod. This policy validates that the image
      specifies a tag and that it is not called `latest`.
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: require-image-tag
      match:
        any:
          - resources:
              kinds:
                - Pod
      validate:
        message: "An image tag is required."
        pattern:
          spec:
            containers:
              - image: "*:*"
    - name: validate-image-tag
      match:
        any:
          - resources:
              kinds:
                - Pod
      validate:
        message: "Using a mutable image tag e.g. 'latest' is not allowed."
        pattern:
          spec:
            containers:
              - image: "!*:latest"
---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-nodeport
  annotations:
    policies.kyverno.io/title: Disallow NodePort
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Service
    policies.kyverno.io/description: >-
      A Kubernetes Service of type NodePort uses a host port to receive traffic from
      any source. A NetworkPolicy cannot be used to control traffic to host ports.
      Although NodePort Services can be useful, their use must be limited to Services
      with additional upstream security checks. This policy validates that any new Services
      do not use the `NodePort` type.
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: validate-nodeport
      match:
        any:
          - resources:
              kinds:
                - Service
      validate:
        message: "Services of type NodePort are not allowed."
        pattern:
          spec:
            =(type): "!NodePort"
---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-deprecated-registry
  annotations:
    policies.kyverno.io/title: Restrict Deprecated Registry
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/severity: high
    policies.kyverno.io/minversion: 1.9.0
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Legacy k8s.gcr.io container image registry will be frozen in early April 2023
      k8s.gcr.io image registry will be frozen from the 3rd of April 2023.
      Images for Kubernetes 1.27 will not be available in the k8s.gcr.io image registry.
      Please read our announcement for more details.
      https://kubernetes.io/blog/2023/02/06/k8s-gcr-io-freeze-announcement/
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: restrict-deprecated-registry
      match:
        any:
          - resources:
              kinds:
                - Pod
      validate:
        message: "The \"k8s.gcr.io\" image registry is deprecated. \"registry.k8s.io\" should now be used."
        foreach:
          - list: "request.object.spec.[initContainers, ephemeralContainers, containers][]"
            deny:
              conditions:
                all:
                  - key: "{{`{{ element.image }}`}}"
                    operator: Equals
                    value: "k8s.gcr.io/*"
