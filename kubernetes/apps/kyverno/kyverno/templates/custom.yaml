---
# yaml-language-server: $schema=https://schemas.rzegocki.dev/kyverno.io/clusterpolicy_v1.json
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-dockerhub-containers
  annotations:
    policies.kyverno.io/title: Disallow DockerHub Containers
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Docker hub imposes very strict ratelimit to its containers which may
      cause issues and broken deployments. This policy validates that the image
      is not using this respository.
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: validate-image-repository
      match:
        any:
          - resources:
              kinds:
                - Pod
      exclude:
        any:
          - resources:
              namespaces:
                # https://github.com/rook/rook/issues/7881#issuecomment-1400878584
                - rook-ceph
      validate:
        message: "Using dockerhub is not allowed"
        deny:
          conditions:
            # yamllint disable rule:line-length
            any:
              - key: "{{`{{`}} regex_match('^docker\\.io/', '{{`{{`}} request.object.spec.containers[0].image {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^docker\\.io/', '{{`{{`}} request.object.spec.containers[1].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^docker\\.io/', '{{`{{`}} request.object.spec.containers[2].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^docker\\.io/', '{{`{{`}} request.object.spec.containers[3].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^docker\\.io/', '{{`{{`}} request.object.spec.containers[4].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^docker\\.io/', '{{`{{`}} request.object.spec.containers[5].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^[^/.]+/[^/]+:', '{{`{{`}} request.object.spec.containers[0].image {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^[^/.]+/[^/]+:', '{{`{{`}} request.object.spec.containers[1].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^[^/.]+/[^/]+:', '{{`{{`}} request.object.spec.containers[2].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^[^/.]+/[^/]+:', '{{`{{`}} request.object.spec.containers[3].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^[^/.]+/[^/]+:', '{{`{{`}} request.object.spec.containers[4].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
              - key: "{{`{{`}} regex_match('^[^/.]+/[^/]+:', '{{`{{`}} request.object.spec.containers[5].image || 'empty' {{`}}`}}') {{`}}`}}"
                operator: Equals
                value: true
                # yamllint enable rule:line-length
