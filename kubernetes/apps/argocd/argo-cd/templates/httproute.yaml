---
# {{ if not .Values.initialize }}
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/gateway.networking.k8s.io/httproute_v1.json
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: argo-cd
spec:
  hostnames:
    - "argocd.{{ .Values.global.rootDomain }}"
  parentRefs:
    - name: internal
      namespace: kube-system
      sectionName: https
  rules:
    - backendRefs:
        - name: argo-cd-server
          namespace: "{{ .Release.Namespace }}"
          port: 80
      filters:
        - type: ResponseHeaderModifier
          responseHeaderModifier:
            add:
              - name: Content-Security-Policy
                value: >-
                  default-src 'self' 'unsafe-inline' data:; object-src 'none';
                  connect-src 'self' https://auth.{{ .Values.global.rootDomain }};

# default-src 'self' 'unsafe-eval' 'wasm-unsafe-eval' 'unsafe-inline' data: mediastream: blob: wss:
# https://*.{{ .Values.global.rootDomain }}; object-src 'none';
---
# yaml-language-server: $schema=https://datreeio.github.io/CRDs-catalog/gateway.networking.k8s.io/httproute_v1.json
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: argo-cd-webhook
spec:
  hostnames:
    - "argocd.{{ .Values.global.rootDomain }}"
  parentRefs:
    - name: external
      namespace: kube-system
      sectionName: https
  rules:
    - backendRefs:
        - name: argo-cd-server
          namespace: "{{ .Release.Namespace }}"
          port: 80
      matches:
        - path:
            value: /api/webhook
# {{ end }}
