---
argo-cd:
  global:
    deploymentStrategy:
      type: RollingUpdate
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      seccompProfile:
        type: RuntimeDefault
    hostAliases:
      - ip: "<path:kubernetes/data/internal/ingress-nginx#IP_INTERNAL>"
        hostnames:
          - "authelia.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
  configs:
    params:
      # by default argocd handles SSL termination on its own, which breaks TLS termination on nginx,
      # causing infinite loop
      "server.insecure": true
    repositories:
      deedee-ops-home-ops:
        name: home-ops
        type: git
        url: https://github.com/deedee-ops/home-ops.git
    cm:
      # this customization make sync-waves work properly
      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs
      # this customization asks argo to ignore CiliumIdentity resources
      resource.exclusions: |
        - apiGroups:
          - cilium.io
          kinds:
          - CiliumIdentity
          clusters:
          - "*"
      url: "https://argocd.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
      oidc.config: |
          name: Authelia
          issuer: "https://authelia.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
          clientID: argocd
          clientSecret: "<path:kubernetes/data/internal/argocd#OIDC_SECRET_RAW>"
          cliClientID: argocd-cli
          requestedScopes:
            - openid
            - profile
            - email
            - groups
    cmp:
      create: true
      plugins:
        argocd-vault-plugin-kustomize:
          allowConcurrency: true
          discover:
            find:
              command:
                - find
                - "."
                - -name
                - kustomization.yaml
          generate:
            command:
              - sh
              - "-c"
              - "kustomize build . | argocd-vault-plugin generate -"
          lockRepo: false
        argocd-vault-plugin-helm:
          allowConcurrency: true
          discover:
            find:
              command:
                - sh
                - "-c"
                - "find . -name 'Chart.yaml' && find . -name 'values.yaml'"
          init:
            command: [sh, -c]
            args: ["helm dependency build"]
          generate:
            command:
              - sh
              - "-c"
              # a lot of ugly hacking here :(
              - >-
                cp values.yaml "/tmp/${ARGOCD_APP_NAMESPACE}-${ARGOCD_APP_NAME}-values-in.yaml" &&
                echo 'kind: Value' >> "/tmp/${ARGOCD_APP_NAMESPACE}-${ARGOCD_APP_NAME}-values-in.yaml" &&
                argocd-vault-plugin generate "/tmp/${ARGOCD_APP_NAMESPACE}-${ARGOCD_APP_NAME}-values-in.yaml" >
                "/tmp/${ARGOCD_APP_NAMESPACE}-${ARGOCD_APP_NAME}-values-out.yaml" &&
                helm template -n $ARGOCD_APP_NAMESPACE --name-template $ARGOCD_APP_NAME --include-crds
                -f "/tmp/${ARGOCD_APP_NAMESPACE}-${ARGOCD_APP_NAME}-values-out.yaml" -a
                monitoring.coreos.com/v1,monitoring.coreos.com/v1/ServiceMonitor,monitoring.coreos.com/v1/PodMonitor . |
                argocd-vault-plugin generate -
          lockRepo: false
        argocd-vault-plugin:
          allowConcurrency: true
          discover:
            find:
              command:
                - sh
                - "-c"
                - >-
                  find . -name '*.yaml' -exec grep -Hoc '<path\\|avp\\.kubernetes\\.io' {} \\; |
                  grep -v ':0' | sed -E 's@:[^:]*@@g'
          generate:
            command:
              - argocd-vault-plugin
              - generate
              - "."
          lockRepo: false

    rbac:
      policy.csv: g, lldap_admin, role:admin

    secret:
      githubSecret: "<path:kubernetes/data/internal/argocd#GITHUB_SECRET>"

  controller:
    replicas: 2
    containerSecurityContext:
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  dex:
    enabled: false

  notifications:
    enabled: false

  server:
    replicas: 2
    containerSecurityContext:
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    autoscaling:
      enabled: false
    ingress:
      enabled: true
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Admin
        gethomepage.dev/name: ArgoCD
        gethomepage.dev/icon: argocd.png
        gethomepage.dev/description: CD Platform
      ingressClassName: internal
      hostname: "argocd.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  repoServer:
    replicas: 2
    containerSecurityContext:
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    podLabels:
      # for downloading helm charts from various sources
      egress/enabled: "true"
    podAnnotations:
      configmap.reloader.stakater.com/reload: argocd-cmp-cm
    autoscaling:
      enabled: false
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    serviceAccount:
      automountServiceAccountToken: true
    volumes:
      - configMap:
          name: argocd-cmp-cm
        name: argocd-cmp-cm
      - name: custom-tools
        emptyDir: {}
      - name: cache
        emptyDir: {}

    initContainers:
      - name: download-tools
        image: alpine:latest
        command: [sh, -ec]
        env:
          - name: AVP_VERSION
            # renovate: datasource=github-releases depName=argoproj-labs/argocd-vault-plugin
            value: "v1.17.0"
        args:
          # yamllint disable rule:line-length
          - |
            AVP_VERSION="$(echo "${AVP_VERSION}" | tr -d v)"

            wget -O /custom-tools/argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64 && \
            chmod +x /custom-tools/argocd-vault-plugin
          # yamllint enable rule:line-length
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
    extraContainers:
      - name: argocd-vault-plugin-helm
        command:
          - /var/run/argocd/argocd-cmp-server
        image: "quay.io/argoproj/argocd:v2.10.9"
        envFrom:
          - secretRef:
              name: argocd-vault-plugin-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/.cache
            name: cache

          # Register plugins into sidecar
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: argocd-vault-plugin-helm.yaml
            name: argocd-cmp-cm

          # Important: Mount tools into $PATH
          - name: custom-tools
            subPath: argocd-vault-plugin
            mountPath: /usr/local/bin/argocd-vault-plugin

      # argocd-vault-plugin with Kustomize
      - name: argocd-vault-plugin-kustomize
        command: [/var/run/argocd/argocd-cmp-server]
        image: "quay.io/argoproj/argocd:v2.10.9"
        envFrom:
          - secretRef:
              name: argocd-vault-plugin-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/.cache
            name: cache

          # Register plugins into sidecar
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: argocd-vault-plugin-kustomize.yaml
            name: argocd-cmp-cm

          # Important: Mount tools into $PATH
          - name: custom-tools
            subPath: argocd-vault-plugin
            mountPath: /usr/local/bin/argocd-vault-plugin

      # argocd-vault-plugin with plain YAML
      - name: argocd-vault-plugin
        command: [/var/run/argocd/argocd-cmp-server]
        image: "quay.io/argoproj/argocd:v2.10.9"
        envFrom:
          - secretRef:
              name: argocd-vault-plugin-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/.cache
            name: cache

          # Register plugins into sidecar
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: argocd-vault-plugin.yaml
            name: argocd-cmp-cm

          # Important: Mount tools into $PATH
          - name: custom-tools
            subPath: argocd-vault-plugin
            mountPath: /usr/local/bin/argocd-vault-plugin

  applicationSet:
    enabled: false

  redis:
    enabled: true
    containerSecurityContext:
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
