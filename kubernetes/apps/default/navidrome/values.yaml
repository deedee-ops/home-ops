---
# yaml-language-server: $schema=https://deedee-ops.github.io/schemas/custom/bjw-s-apptemplate.json
app-template:
  defaultPodOptions:
    securityContext:
      fsGroup: 65000
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault

  controllers:
    navidrome:
      containers:
        app:
          image:
            repository: ghcr.io/deedee-ops/navidrome
            tag: 0.52.0
            pullPolicy: IfNotPresent

          env:
            ND_BASEURL: "/"
            ND_COVERARTPRIORITY: "folder.*, cover.*, front.*"
            ND_DEFAULTLANGUAGE: "en"
            ND_PROMETHEUS_METRICSPATH: "/metrics"
            ND_PROMETHEUS_ENABLED: "true"
            ND_REVERSEPROXYUSERHEADER: "Remote-User"
            ND_REVERSEPROXYWHITELIST: "172.16.0.0/12"
            ND_SCANNER_GROUPALBUMRELEASES: "true"
            TZ: "Europe/Warsaw"

          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

          probes:
            startup: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 3000
            readiness: *probes
            liveness: *probes

          resources:
            requests:
              cpu: 10m
              memory: 250Mi
            limits:
              memory: 750Mi

  service:
    app:
      controller: navidrome
      ports:
        http:
          port: 3000

  serviceMonitor:
    app:
      serviceName: navidrome
      endpoints:
        - port: http
          scheme: http
          path: /metrics
          interval: 1m
          scrapeTimeout: 10s

  ingress:
    navidrome:
      className: internal
      annotations:
        nginx.ingress.kubernetes.io/configuration-snippet: >-
          more_set_headers "Content-Security-Policy: default-src 'self' 'unsafe-eval' 'wasm-unsafe-eval' 'unsafe-inline'
          data: mediastream: blob: wss: https://*.<path:kubernetes/data/internal/base#ROOT_DOMAIN>; object-src 'none';
          img-src 'self' data: blob: https:;
          media-src 'self' data: blob: https:;
          report-uri https://csp.rzegocki.dev/report/csp/navidrome;";
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Media
        gethomepage.dev/name: Navidrome
        gethomepage.dev/icon: navidrome.png
        gethomepage.dev/description: Music Player
      hosts:
        - host: "navidrome.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: app
                port: 3000
      tls:
        - hosts:
            - "navidrome.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"

    subsonic:
      className: internal
      annotations:
        nginx.ingress.kubernetes.io/enable-global-auth: "false"
      hosts:
        - host: "navidrome.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
          paths:
            - path: /rest
              pathType: Prefix
              service:
                identifier: app
                port: 3000
      tls:
        - hosts:
            - "navidrome.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"

  persistence:
    config:
      type: persistentVolumeClaim
      existingClaim: navidrome-config
      globalMounts:
        - path: /config
    music:
      type: persistentVolumeClaim
      existingClaim: navidrome-music
      globalMounts:
        - path: /data
          readOnly: true
