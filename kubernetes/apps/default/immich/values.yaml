---
# yaml-language-server: $schema=https://deedee-ops.github.io/schemas/custom/bjw-s-apptemplate.json
common-env: &env
  DB_DATABASE_NAME: "<path:kubernetes/data/internal/immich#DB_DATABASE>"
  DB_HOSTNAME: "<path:kubernetes/data/internal/cloudnative-pg#HOST>"
  DB_PASSWORD: "<path:kubernetes/data/internal/immich#DB_PASSWORD>"
  DB_USERNAME: "<path:kubernetes/data/internal/immich#DB_USERNAME>"
  NODE_ENV: production
  IMMICH_ENV: production
  REDIS_HOSTNAME: redis-ha-haproxy.database.svc.cluster.local
  REDIS_PASSWORD: "<path:kubernetes/data/internal/redis-ha#PASSWORD>"
  REDIS_PORT: 6379
  TZ: Europe/Warsaw

app-template:
  defaultPodOptions:
    securityContext:
      fsGroup: 65000
      runAsUser: 65000
      runAsGroup: 65000
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault

  controllers:
    machine-learning:
      annotations:
        reloader.stakater.com/auto: "true"

      containers:
        app:
          image:
            repository: ghcr.io/immich-app/immich-machine-learning
            tag: main
            pullPolicy: IfNotPresent

          env:
            <<: *env
            TRANSFORMERS_CACHE: /cache
            MPLCONFIGDIR: /cache/matplotlib

          securityContext: &securityContext
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

          probes:
            liveness: &mlprobes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: 3003
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *mlprobes
            startup:
              enabled: false

          resources:
            requests:
              cpu: 10m
              memory: 1Gi
            limits:
              memory: 6Gi

    server:
      annotations:
        reloader.stakater.com/auto: "true"

      containers:
        app:
          image:
            repository: ghcr.io/immich-app/immich-server
            tag: main
            pullPolicy: IfNotPresent

          env:
            <<: *env
            IMMICH_CONFIG_FILE: /config/config.json
            IMMICH_MACHINE_LEARNING_URL: http://immich-machine-learning.default.svc.cluster.local:3003
            IMMICH_METRICS: true

          securityContext: *securityContext

          probes:
            liveness: &srvprobes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /api/server-info/ping
                  port: 3001
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *srvprobes
            startup:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /api/server-info/ping
                  port: 3001
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 30

          resources:
            requests:
              cpu: 10m
              memory: 128Mi
              gpu.intel.com/i915: 1
            limits:
              memory: 2Gi
              gpu.intel.com/i915: 1

    album-creator:
      type: cronjob
      cronjob:
        schedule: "0 0 * * *"   # once a day
        successfulJobsHistory: 0
        failedJobsHistory: 5
      pod:
        securityContext:
          runAsUser: 65000
          runAsGroup: 65000
          fsGroup: 65000
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      containers:
        app:
          image:
            repository: ghcr.io/salvoxia/immich-folder-album-creator
            tag: 0.9.0
            pullPolicy: IfNotPresent
          command:
            - /script/immich_auto_album.sh
          env:
            ALBUM_LEVELS: 1
            API_KEY: "<path:kubernetes/data/internal/immich#API_KEY>"
            API_URL: http://immich-server.default.svc.cluster.local:3001/api/
            MODE: CREATE
            ROOT_PATH: /photos
            SYNC_MODE: 1
            UNATTENDED: 1

          securityContext: *securityContext

          probes:
            readiness: &probes
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                    - pgrep
                    - -f
                    - immich_auto_album
                initialDelaySeconds: 5
                periodSeconds: 10
                failureThreshold: 3
            liveness: *probes

          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              memory: 128Mi

  service:
    server:
      controller: server
      ports:
        http:
          port: 3001
          protocol: HTTP
        metrics-api:
          port: 8081
          protocol: HTTP
        metrics-ms:
          port: 8082
          protocol: HTTP
    machine-learning:
      controller: machine-learning
      ports:
        http:
          port: 3003
          protocol: HTTP

  serviceMonitor:
    server:
      serviceName: server
      endpoints:
        - port: metrics-api
          scheme: http
        - port: metrics-ms
          scheme: http

  ingress:
    server:
      className: internal
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Media
        gethomepage.dev/name: Immich
        gethomepage.dev/icon: immich.png
        gethomepage.dev/description: Photo Library
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        nginx.ingress.kubernetes.io/configuration-snippet: >-
          more_set_headers "Content-Security-Policy:
          default-src 'self' 'unsafe-eval' 'wasm-unsafe-eval' 'unsafe-inline' data: mediastream: blob: wss:
          https://static.immich.cloud https://tiles.immich.cloud
          https://*.<path:kubernetes/data/internal/base#ROOT_DOMAIN>; object-src 'none';
          report-uri https://csp.<path:kubernetes/data/internal/base#ROOT_DOMAIN>/report/csp/audiobookshelf;";
      hosts:
        - host: "immich.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: server
                port: 3001
      tls:
        - hosts:
            - "immich.<path:kubernetes/data/internal/base#ROOT_DOMAIN>"

  persistence:
    cache:
      type: persistentVolumeClaim
      storageClass: local-path
      size: 10Gi
      accessMode: ReadWriteOnce
      advancedMounts:
        machine-learning:
          app:
            - path: "/cache"
    config-file:
      type: configMap
      name: immich-configmap
      globalMounts:
        - path: /config/config.json
          subPath: config.json
          readOnly: true
    library:
      type: persistentVolumeClaim
      storageClass: ceph-block
      size: 100Gi
      accessMode: ReadWriteOnce
      advancedMounts:
        server:
          app:
            - path: "/usr/src/app/upload"
    photos:
      type: persistentVolumeClaim
      existingClaim: immich-photos
      advancedMounts:
        album-creator:
          app:
            - path: "/photos"
              readOnly: true
        server:
          app:
            - path: "/photos"
              readOnly: true
    tmpdir:
      type: emptyDir
      medium: Memory
      globalMounts:
        - path: /tmp
