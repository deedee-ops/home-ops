---
# This is "special" magic file, which can self-reference it's own data via
# go templating (because it's double-parsed by argo later).
# So any value in this file, can be expanded in the file itself.
global:
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  kubernetesVersion: v1.33.2
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  talosVersion: v1.10.4

  clusterName: deedee
  rootDomain: rzegocki.dev
  network:
    k8sGateway: 10.42.20.1
    k8sCIDR: 10.42.20.0/24
    cephCIDR: 169.254.20.0/24
  machines:
    nas: nas.home.arpa

  disabledApps: []  # namespace/app-name

blackboxExporterProbes:
  icmp:
    - "{{ .global.machines.nas }}"
    - "zigbee-top.home.arpa"
    - "zigbee-bottom.home.arpa"
  tcp_connect:
    # nfs
    - host: "{{ .global.machines.nas }}"
      port: "2049"

scrapeTargets:
  nodeExporter:
    - "{{ .global.machines.nas }}"
  smartctlExporter:
    - "{{ .global.machines.nas }}"
  snmpExporter:
    - host: "{{ .global.machines.nas }}"
      params:
        auth:
          - synology
        module:
          - synology
        target:
          - "{{ .global.machines.nas }}"
  zigbeeExporter:
    - "zigbee-top.home.arpa"
    - "zigbee-bottom.home.arpa"

# dependent charts
authelia:
  route:
    main:
      hostnames:
        - "auth.{{ .global.rootDomain }}"

argo-cd:
  configs:
    cm:
      url: "https://argocd.{{ .global.rootDomain }}"
      oidc.config: |
        name: Authelia
        issuer: "https://auth.{{ .global.rootDomain }}"
        clientID: $oidc.authelia.clientID
        clientSecret: $oidc.authelia.clientSecret
        requestedScopes:
          - openid
          - profile
          - email
          - groups
        requestedIDTokenClaims:
          email:
            essential: true
          groups:
            essential: true

cilium:
  cluster:
    name: "{{ .global.clusterName }}"
  custom:
    bgpRouter:
      name: unifi
      ip: "{{ .global.network.k8sGateway }}"
    pools:
      - "{{ .global.network.k8sCIDR }}"

external-dns-cloudflare:
  domainFilters:
    - "{{ .global.rootDomain }}"

external-dns-unifi:
  domainFilters:
    - "{{ .global.rootDomain }}"

external-secrets:
  bitwarden:
    organizationID: 6d56fa67-67e1-4697-9d7f-b2ad00d31d5d
    projectID: 897c2d63-5ef1-4073-bc12-b2d400b0a7c3

grafana:
  env:
    GF_SERVER_ROOT_URL: "https://grafana.{{ .global.rootDomain }}"
  route:
    main:
      hostnames:
        - "grafana.{{ .global.rootDomain }}"

kube-prometheus-stack:
  alertmanager:
    route:
      main:
        hostnames:
          - "alertmanager.{{ .global.rootDomain }}"
    alertmanagerSpec:
      externalUrl: "https://alertmanager.{{ .global.rootDomain }}"
  prometheus:
    route:
      main:
        hostnames:
          - "prometheus.{{ .global.rootDomain }}"

rook-ceph-cluster:
  network:
    addressRanges:
      public:
        - "{{ .global.network.k8sCIDR }}"
      cluster:
        - "{{ .global.network.cephCIDR }}"

unpoller:
  controllers:
    unpoller:
      containers:
        main:
          env:
            UP_UNIFI_DEFAULT_URL: "https://{{ .global.network.k8sGateway }}"
